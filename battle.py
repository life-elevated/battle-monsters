# A fun little game that my son and I are working on. Right now its all
# console/text based. It allows the creation of characters with various
# attributes. The characters can initialize a battle with another character.
# Players turns are randomly generated by rolling the 'dice' and attack
# damage is based on weapon/armor strength and sometimes misses. The more
# powerful the weapon is that's used, the more likely the attack will miss.
# There are now also Attack Enhancements to earn and use in battle!!! 
# I also provided an API of sorts to directly manipulate characters.

from random import randint
zzz =('Brian','32','male',2,3,3,5)
yyy =('Brayden','8','male',2,3,3,5)
users=[]
battles=[]
type_choices = ['Good guy','Bad guy', 'Good monster', 'Bad monster','Boss Pizza']
weapon_choices = [['Sword',10],['Knife',5],['Gun',15],['Grenade',20],['Flame-Thrower',25],['Diamond-Gun',30],['Brayden-Bomb',35],['Summer-Tornado',40]]
fx_choices=[('1.5 X Damage',1),('2 X Damage',2),('No Miss Guarantee',3),('+20 Damage Points',4),('Health Back Attack',5)]


#-------------------------------------------------------------
#  I made this function to allow auto-creation of characters 
#  based on a tuple of attributes. Right now it returns two
#  characters, Me and my son! :P It also fully equips each
#  one with all weapons and attack enhancements
#    brian,brayden = auto(tuple1,tuple2)
#--------------------------------------------------------------
def auto():
    brian =('Brian','32','male',2,3,3,5)
    brayden =('Brayden','8','male',2,3,3,5)
    user1 = create(brian)
    for i in weapon_choices:
        if not i in user1.weapons_list:
            user1.weapons_list.append(i)
    for i in fx_choices:
        if not i in user1.special_fx_list:
            user1.special_fx_list.append(i)
    user2 = create(brayden)
    for i in weapon_choices:
        if not i in user2.weapons_list:
            user2.weapons_list.append(i)
    for i in fx_choices:
        if not i in user2.special_fx_list:
            user2.special_fx_list.append(i)
    return user1,user2
class create():
#----------------------------------------------------------------
#  Creates the user and gathers personal info:
#      user1 = create() <<---interactive
#      OR
#      user1 = create(('Brian,'32','male',1,3,2,5)) <<------manual
#----------------------------------------------------------------
    def __init__(self,*args):
        self.weapons_list=[]
        self.special_fx_list = []
        try:
            if len(args[0]) >= 5:
                try:
                    self.name = args[0][0]
                    self.age = args[0][1]
                    self.sex = args[0][2]
                    self.type = type_choices[args[0][3]]
                    self.weapons_list.append(weapon_choices[args[0][4]])
                    self.special_fx_list.append(fx_choices[args[0][5]])
                    self.armor = args[0][6]
                    self.health=500
                    if not self in users:
                        users.append(self) # Add ourself to the list of active users
                except Exception as e:
                    print(e)
        except Exception as e:
            print('\n Manual creation failed. Switching to interactive creation....\n\n')
            #print(e)
            self.build()


#----------------------------------------------------------------
#  Build character attributes. This is called automatically
#  when you create a user. You can also call this manually on any
#  user to reset all their attributes at any time:
#      user1.build()
#----------------------------------------------------------------
    def build(self):
        self.name = input('Name: > ')
        self.age = input('Age: > ')
        self.sex = input('Gender: > ')
        self.health=500
        print('\n\n\n')
        prefix = 0
        for i in type_choices:
            print(str(prefix)+': ',i)
            prefix +=1
        while True:
            selection = input('Choose a user type by entering its number 0-4: > ')
            try:
                selection = int(selection)
                if selection in range(0,5):
                    self.type = type_choices[selection]
                    break
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between 0-3')
        while True:
            selection = input('Choose default armor strength by entering 1-5: > ')
            try:
                selection = int(selection)
                if selection in range(1,6):
                    self.change_armor(selection)
                    break
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between 0-3')
        self.add_weapon()
        self.add_fx()
        if not self in users:
            users.append(self) # Add ourself to the list of active users




#----------------------------------------------------------------
#   Manually add a weapon:
#       user1.add_weapon()    this is auto-called by build()
#----------------------------------------------------------------
    def add_weapon(self):
        print('\n\n\n')
        prefix = 0
        for i in weapon_choices:
            print (str(prefix)+': ', i[0])
            prefix +=1
        while True:
            selection = input('Choose a weapon by entering its number 0-7: > ')
            try:
                selection = int(selection)
                maxval=len(weapon_choices)
                if selection in range(0,maxval):
                    if not weapon_choices[selection] in self.weapons_list:
                        self.weapons_list.append(weapon_choices[selection])
                    break
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between 0-'+str(maxval))


#-------------------------------------------------------------
#  Manually add a special fx item:    this is auto-called by build()
#      user.add_fx()
#-------------------------------------------------------------
    def add_fx(self):
        prefix = 0
        for i in fx_choices:
            print (str(prefix)+': ', i[0])
            prefix +=1
        while True:
            selection = input('Choose a special fx by entering its number: > ')
            try:
                range_set = len(fx_choices)
                #range_set = (0,range_set)
                selection = int(selection)
                if selection in range(range_set):
                    if not fx_choices[selection] in self.special_fx_list:
                        self.special_fx_list.append(fx_choices[selection])
                    break
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between')
          
#----------------------------------------------------------------
#  Manually change armor strength:
#      user1.change_armor(5)
#----------------------------------------------------------------
    def change_armor(self,val):
        if val in range(1,6):
            self.armor = val
        else:
            print('Invalid entry, you must enter 1-5')




#----------------------------------------------------------------
#   Get statistics about user:
#       user1.stats()
#----------------------------------------------------------------
    def stats(self):
        print('\n\n\nUSER STATS:')
        print('\nName:  '+self.name)
        print('Age:  '+self.age)
        print('Gender:  '+self.sex)
        print('Health:  '+str(self.health))
        print('Armor strength:  '+str(self.armor))
        print('Weapons:')
        for i in self.weapons_list:
            print('       '+i[0])
        print('Enhancements:')
        for i in self.special_fx_list:
            print('       '+i[0])
        #print('\n\n\n')
        print('\n\n\n')




#----------------------------------------------------------------
#  Manually inflicts damage on user:
#     user1.take_damage(50)
#----------------------------------------------------------------
    def take_damage(self,val,*args):
        if self.armor == 1:
            damage = val * 5
        elif self.armor == 2:
            damage = val * 4
        elif self.armor == 3:
            damage = val * 3
        elif self.armor == 4:
            damage = val * 2
        elif self.armor == 5:
            damage = val
        if not self.health <= 0:
            if len(args) > 0:
                if args[0][0] == '*':
                    damage = damage * args[0][1]
                if args[0][0] == '+':
                    damage = damage + args[0][1]     
            self.health -= damage
        if self.health <= 0:
            self.health = 0
            print('YOU ARE DEAD!')
            return damage,self.health
        else:
            return damage,self.health




#----------------------------------------------------------------
#  Directly manipulate the users health:
#      user1.change_health(500)
#----------------------------------------------------------------
    def change_health(self,val,*args):
        self.health=int(val)
        if val >500:
            self.health=500




#----------------------------------------------------------------
#  Attack a user:
#     user1.attack(user2)
#----------------------------------------------------------------
    # For each attack, I generate a random number 1-100. The attack will miss
    # if that number is larger than the number associated with the weapon used.
    # I am passing in the special effect if selected but haven't decided how to 
    # exactly use them all yet....
    def attack(self,char,effect=None):
        hit_or_miss_scale={'Knife':90,'Sword':85,'Gun':80,'Grenade':75,'Flame-Thrower':70,'Diamond-Gun':60,'Brayden-Bomb':50,'Summer-Tornado':50}
        use_extra_val=False
        no_miss=False
        miss_attack_flag=False
        prefix=0
        print('\n\n')
        for i in self.weapons_list:
            print (str(prefix)+': ', i[0])
            prefix +=1
        while True:
            selection = input('Choose a weapon to use for the attack: > ')
            try:
                range_set = len(self.weapons_list)
                selection = int(selection)
                if selection in range(range_set):
                    weapon = self.weapons_list[selection]
                    print('your weapon: ', weapon[0])
                    break
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between 0-'+str(range_set))




        # check special fx being used for the attack.....
           # somehow use some trickery to make them all work,
               # so far so simple but I plan on building upon this simple framework...
        if effect:
            if effect[1] == 1:     # 1.5 X damage
                use_extra_val = True
                extra_val=('*',1.5)
            if effect[1] == 2:     # 2 X damage
                use_extra_val = True
                extra_val=('*',2)
            if effect[1] == 3:     # No miss guarantee
                no_miss=True
            if effect[1] == 4:     # +20 damage points
                use_extra_val = True
                extra_val = ('+',20)
            if effect[1] == 5:     # +20 Health back attack
                new_health = self.health + 20
                self.change_health(new_health)
                print(self.name + ' has used +20 Health Back Attack and recieved 20 health points.\n'+self.name+' now has a health of '+str(self.health))

        if randint(1,100) > hit_or_miss_scale[weapon[0]]:
            miss_attack_flag=True
            if not no_miss:
                if miss_attack_flag:
                    print('you missed your attack!!!')
                    return 0

        if use_extra_val:
            damage,health = char.take_damage(weapon[1],extra_val)
        else:
            damage,health = char.take_damage(weapon[1])

            
        print('\n'+char.name+' has taken damage by a '+weapon[0]+' of '+str(damage)+' damage! His health is now '+str(health))
        return damage


#----------------------------------------------------------------
#  Start the battle menu:
#      user1.battle_menu()
#----------------------------------------------------------------
    def battle_menu(self):
        prefix=0
        users.remove(self) # Remove ourself from the list of users to battle.
                           # Seems pointless to battle yourself. We add ourself
                           # back to the list after a valid opponent is selected.
        for i in users:
            print (str(prefix)+': ', i.name,i.age,i.type)
            prefix +=1
        while True:
            selection = input('Choose a user to battle by entering its number: > ')
            try:
                range_set = len(users)
                #range_set = (0,range_set)
                selection = int(selection)
                if selection in range(range_set):
                    opponent = users[selection]
                    print('your opponent: ', opponent.name)
                    
                    battle= Battle(self,opponent)
                    battles.append(battle)
                    users.append(self) # Add the ourself back to the users list
                    break
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between')

#----------------------------------------------------
#    This is used internally during a battle when a 
#    user chooses to use an fx before an attack
#----------------------------------------------------
    def _fxmenu(self):
        prefix=0
        for i in self.special_fx_list:
            print (str(prefix)+': ', i[0])
            prefix +=1
        while True:
            selection = input('Choose a special fx item to use by entering its number: > ')
            try:
                range_set = len(self.special_fx_list)
                selection = int(selection)
                if selection in range(range_set):
                    effect = self.special_fx_list[selection]
                    print('your effect: ', effect[0])                    
                    return effect
                else:
                    raise ValueError
            except ValueError:
                print('You must enter a number between')
#--------------------------------------------------------
#  Manually start a battle, you should add to the battles
#  list as well if you use this manually.. Try to use
#  user1.battle_menu() instead
#      battle1 = Battle(user1,user2)
#      battles.append(battle1)
#--------------------------------------------------------
class Battle():
    def __init__(self,player1,player2):
        turn=0
        self.p1_turns=0
        self.p2_turns=0
        self.p1_damage=0
        self.p2_damage=0
        self.winner = None
        for each in range(0,5):
            input(player1.name+', press enter to roll the dice.')
            x=randint(1,12)
            print('\n'+player1.name+' got '+str(x))
            input('\n'+player2.name+', press enter to roll the dice.')
            y=randint(1,12)
            print('\n'+player2.name+' got '+str(y))
            if x > y:
                active = player1
                opp = player2
            else:
                active = player2
                opp = player1
            print('\n'+active.name+' won the dice roll and will take their turn now....')
            use_fx=input('Would you like to use a Special Fx Enhancement for this attack?.. >')
            if use_fx.lower() == 'y':
                effect = active._fxmenu()
                dmg_val = active.attack(opp,effect)
            else:  
                dmg_val = active.attack(opp)
            turn += 1
            if active is player1:
                self.p1_turns+=1
                self.p2_damage+=dmg_val
            if active is player2:
                self.p2_turns+=1
                self.p1_damage+=dmg_val
            if active.health <= 0:
                print(active.name+' has DIED and the match has ended. '+opp.name+' has won the match!')
                self.winner = opp
                break
            if opp.health <= 0:
                print(opp.name+' has DIED and the match has ended. '+active.name+' has won the match!')
                self.winner = active
                break
        if not self.winner:
            if self.p1_damage > self.p2_damage:
                self.winner = player2
                
            else:
                self.winner = player1
        
            print('\n\n\nThe match has ended without a death!. '+self.winner.name+' has won the match!')


        #Battle results are stored as: ('Winner name'), (Player1_name,damage,turns), (Player2_name,damage,turns)
        self.results = (self.winner.name,(player1.name,self.p1_damage,self.p1_turns),(player2.name,self.p2_damage,self.p2_turns))




#---------------------------------------------------------
#  Get the results printed to the screen from all battles.
#      battle_stats()
#---------------------------------------------------------

def battle_stats():
    prefix=0
    pause = 0
    if len(battles) > 0:
        for i in battles:
            prefix += 1
            handle = i.results
            winner_name=handle[0]
            p1_name=handle[1][0]
            p1_damage=handle[1][1]
            p1_turns=handle[1][2]
            p2_name=handle[2][0]
            p2_damage=handle[2][1]
            p2_turns=handle[2][2]
        
            spacing = ' ' * len(p1_name)
            spacing2 = '  '
            if len(str(p1_damage)) == 1:
                spacing = spacing + ' '
                spacing2 = ' '
            if len(str(p1_damage)) == 3:
                spc_len=len(spacing) - 1
                spacing = ' ' * spc_len
                spacing2 = '   '
            print('.')
            print('\n#############################################################')
            print('\n\n  Battle '+str(prefix)+':')
            print('  Winner: '+winner_name)
            print('       Player 1: '+p1_name+'\t\tPlayer 2: '+p2_name)
            print('       Damage: '+str(p1_damage)+spacing+'\t\tDamage: '+str(p2_damage))
            print('       Turns: '+str(p1_turns)+spacing+spacing2+'\t\tTurns: '+str(p2_turns))
            print('\n\n#############################################################')
            print('.')
            pause += 1
            if pause == 2:
                input('Press enter to continue')
                pause = 0
    else:
        print('There are no battles to display..')





print('\n\n\n You have just imported BATTLE MONSTERS! To get started, you must create 2 or more\ncharacters by typing: user=create() for each character you want to create.\nReplace \'user\' with appropriate character names. Then run user.battle_menu()\nHave fun!\n\n\n')
